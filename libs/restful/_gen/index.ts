/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import React from 'react';
import { unauthorizedPageUrl } from '../configs';
import { removeStoreAccessToken } from '../utils';
export class AuthorizedApiBase {
  protected readonly config: IApiClientConfig;

  constructor(config: IApiClientConfig) {
    this.config = config;
  }

  protected transformOptions = (options: RequestInit): Promise<RequestInit> => {
    options.headers = {
      ...options.headers
    };

    const token = this.config.getAuthorization();

    if (token) {
      options.headers['Authorization'] = `Bearer ${token}`;
    }

    return Promise.resolve(options);
  };

  protected getBaseUrl = (...args: (string | undefined)[]) => {
    return API_URL;
  }

  protected transformResult = (url: string, response: Response, callback: (_response: Response) => Promise<any>) => {
    if (response.status === 401) {
      removeStoreAccessToken();
      location.href = unauthorizedPageUrl;
    }

    return callback(response);
  }
}

export interface ClientApiChangePasswordPostParams {
viewModel?: ChangePasswordViewModel | null | undefined
}
export interface ClientApiCreateTokenPostParams {
login?: LoginViewModel | null | undefined
}

export class Client extends AuthorizedApiBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: IApiClientConfig, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @param viewModel (optional) 
     * @return Success
     */
    apiChangePasswordPost(params: ClientApiChangePasswordPostParams): Promise<void> {
        const { viewModel } = params;

        let url_ = this.baseUrl + "/api/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(viewModel);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiChangePasswordPost(_response);
        });
    }

    useApiChangePasswordPost(): [(p: ClientApiChangePasswordPostParams) => void, boolean, void | undefined, ApiException | undefined, () => void]{
            const [result, setResult] = React.useState<void | undefined>();
            const [loading, setLoading] = React.useState(false);
            const [error, setError] = React.useState<ApiException | undefined>();
            const [isCancel, setIsCanel] = React.useState(false);
    
            const request = (params: ClientApiChangePasswordPostParams) => {
              setLoading(true);
              this.apiChangePasswordPost(params)
                .then((_response) => {
                  if (isCancel) {
                    return;
                  }
                  setResult(_response)
                })
                .catch(error => {
                  if (isCancel) {
                    return;
                  }
                  setError(error);
                }).finally(() => {
                  if (isCancel) {
                    return;
                  }
                  setLoading(false);
                });
            }
          
            const cancel = () => setIsCanel(true)
          
            return [request, loading, result, error, cancel];
        }

    protected processApiChangePasswordPost(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param login (optional) 
     * @return Success
     */
    apiCreateTokenPost(params: ClientApiCreateTokenPostParams): Promise<void> {
        const { login } = params;

        let url_ = this.baseUrl + "/api/create-token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(login);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiCreateTokenPost(_response);
        });
    }

    useApiCreateTokenPost(): [(p: ClientApiCreateTokenPostParams) => void, boolean, void | undefined, ApiException | undefined, () => void]{
            const [result, setResult] = React.useState<void | undefined>();
            const [loading, setLoading] = React.useState(false);
            const [error, setError] = React.useState<ApiException | undefined>();
            const [isCancel, setIsCanel] = React.useState(false);
    
            const request = (params: ClientApiCreateTokenPostParams) => {
              setLoading(true);
              this.apiCreateTokenPost(params)
                .then((_response) => {
                  if (isCancel) {
                    return;
                  }
                  setResult(_response)
                })
                .catch(error => {
                  if (isCancel) {
                    return;
                  }
                  setError(error);
                }).finally(() => {
                  if (isCancel) {
                    return;
                  }
                  setLoading(false);
                });
            }
          
            const cancel = () => setIsCanel(true)
          
            return [request, loading, result, error, cancel];
        }

    protected processApiCreateTokenPost(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface ChangePasswordViewModel {
    userId: number;
    oldPassword: string;
    newPassword: string;
    newPasswordConfirm: string;
}

export interface LoginViewModel {
    username?: string | undefined;
    password?: string | undefined;
    grantType?: string | undefined;
    refreshToken?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

/**
 * Configuration class needed in base class.
 * The config is provided to the API client at initialization time.
 * API clients inherit from #AuthorizedApiBase and provide the config.
 */
export class IApiClientConfig {
  /**
   * Returns a valid value for the Authorization header.
   * Used to dynamically inject the current auth header.
   */
  getAuthorization: () => string | undefined;
}